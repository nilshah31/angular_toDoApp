{"version":3,"file":"PNotifyHistory.js","sources":["src/PNotifyHistory.html"],"sourcesContent":["<script>\n  import PNotify from './PNotify.html';\n\n  export default {\n    setup (Component) {\n      Component.key = 'History';\n\n      Component.defaults = {\n        // Place the notice in the history.\n        history: true,\n        // Maximum number of notices to have open in its stack.\n        maxInStack: Infinity\n      };\n\n      Component.init = (notice) => {\n        return new Component({target: document.body});\n      };\n\n      Component.showLast = (stack) => {\n        if (stack === undefined) {\n          stack = PNotify.defaultStack;\n        }\n        if (stack === false) {\n          return;\n        }\n        const top = (stack.push === 'top');\n\n        // Look up the last history notice, and display it.\n        let i = (top ? 0 : PNotify.notices.length - 1);\n\n        let notice;\n        do {\n          notice = PNotify.notices[i];\n\n          if (!notice) {\n            return;\n          }\n\n          i += (top ? 1 : -1);\n        } while (\n          notice.get().stack !== stack ||\n          !notice.get()._modules.History.get().history ||\n          notice.get()._state === 'opening' ||\n          notice.get()._state === 'open'\n        );\n\n        notice.open();\n      };\n\n      Component.showAll = (stack) => {\n        if (stack === undefined) {\n          stack = PNotify.defaultStack;\n        }\n        if (stack === false) {\n          return;\n        }\n\n        // Display all notices. (Disregarding non-history notices.)\n        for (let i = 0; i < PNotify.notices.length; i++) {\n          const notice = PNotify.notices[i];\n          if (\n            (\n              stack === true ||\n              notice.get().stack === stack\n            ) &&\n            notice.get()._modules.History.get().history\n          ) {\n            notice.open();\n          }\n        }\n      };\n\n      // Register the module with PNotify.\n      PNotify.modules.History = Component;\n    },\n\n    data () {\n      return Object.assign({\n        '_notice': null, // The PNotify notice.\n        '_options': {} // The options for the notice.\n      }, PNotify.modules.History.defaults);\n    },\n\n    methods: {\n      initModule (options) {\n        this.set(options);\n\n        if (this.get().history) {\n          // Don't destroy notices that are in history.\n          const {_notice} = this.get();\n          if (_notice.get().destroy) {\n            _notice.set({'destroy': false});\n          }\n        }\n      },\n\n      beforeOpen () {\n        const {maxInStack, _options} = this.get();\n        if (maxInStack === Infinity) {\n          return;\n        }\n\n        const stack = _options.stack;\n        if (stack === false) {\n          return;\n        }\n\n        // Remove oldest notifications leaving only maxInStack from the stack.\n        if (PNotify.notices && (PNotify.notices.length > maxInStack)) {\n          // Oldest are normally in front of array, or if stack.push=='top' then\n          // they are at the end of the array!\n          const top = stack.push === 'top';\n          const forRemoval = [];\n          let currentOpen = 0;\n\n          for (let i = (top ? 0 : PNotify.notices.length - 1); (top ? i < PNotify.notices.length : i >= 0); (top ? i++ : i--)) {\n            if (\n              ['opening', 'open'].indexOf(PNotify.notices[i].get()._state) !== -1 &&\n              PNotify.notices[i].get().stack === stack\n            ) {\n              if (currentOpen >= maxInStack) {\n                forRemoval.push(PNotify.notices[i]);\n              } else {\n                currentOpen++;\n              }\n            }\n          }\n\n          for (let i = 0; i < forRemoval.length; i++) {\n            forRemoval[i].close(false);\n          }\n        }\n      }\n    }\n  };\n</script>\n"],"names":[],"mappings":"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"}